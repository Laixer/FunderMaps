@page "/survey/upload"
@using Microsoft.Extensions.Logging
@using Microsoft.AspNetCore.Components.Forms
@using FunderMaps.Incident.Components.Layout
@using FunderMaps.Core.Helpers
@using FunderMaps.Core.Interfaces
@inject ILogger<Upload> Logger
@inject IBlobStorageService BlobStorageService

<div class="Upload__Wrapper">
    <Title Message="Heeft u informatie beschikbaar?" Subtitle="U kunt deze stap ook overslaan" Center="true" />

    <form id="upload-area" class="UploadArea dropzone dz-clickable">
        <label for="file-upload">
            <div class="dz-message align-self-center">
                <InputFile Id="file-upload" style="display:none" OnChange="@LoadFiles" multiple />

                @if (loadedFiles.Count > 0)
                {
                    <div style="display: flex; justify-content: center;">
                        @foreach (var file in loadedFiles)
                        {
                            <div>
                                <img alt="uploaded"
                                    src="https://images.freeimages.com/fic/images/icons/2813/flat_jewels/512/file.png"
                                    width="150">
                                <p>@file.Name</p>
                            </div>
                        }
                    </div>
                }
                else
                {
                    <img alt="upload" src="/img/upload.svg" />
                }

                <p class="mb-0 mt-3">
                    <strong>Upload onderzoeksrapporten, archiefstukken, tekeningen of foto's</strong>
                <div>
                    <span>Klik om een bestand te kiezen</span>
                </div>
                </p>
            </div>
        </label>
    </form>

</div>

@code {
    [CascadingParameter]
    protected State State { get; set; } = default!;

    private List<IBrowserFile> loadedFiles = new();

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        foreach (var file in e.GetMultipleFiles(25))
        {
            try
            {
                var storeFileName = FileHelper.GetUniqueName(file.Name);
                await BlobStorageService.StoreFileAsync(
                containerName: Core.Constants.IncidentStorageFolderName,
                fileName: storeFileName,
                contentType: file.ContentType,
                stream: file.OpenReadStream(512 * 1024 * 1024));

                loadedFiles.Add(file);

                if (State.Model.DocumentFile is null)
                {
                    State.Model.DocumentFile = new string[]
                    {
                        storeFileName
                    };
                }
                else
                {
                    var list = State.Model.DocumentFile.ToList();
                    list.Add(storeFileName);
                    State.Model.DocumentFile = list.ToArray();
                }
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Failed to upload file.");
            }
        }
    }
}
