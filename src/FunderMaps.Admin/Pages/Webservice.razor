@page "/webservice/{Id?}"

@using FunderMaps.Core.Interfaces.Repositories
@inject IAnalysisRepository AnalysisRepository

@inject IHttpContextAccessor HttpContextAccessor
@inject Core.AppContext AppContext

<PageTitle>Webservice</PageTitle>

<h1>Webservice</h1>

<p>Building analysis.</p>

<div class="form-row align-items-center">
    <div class="col-auto">
        <input type="text" class="form-control mb-2" @bind="Id" placeholder="BAG">
    </div>
    <div class="col-auto">
        <button type="submit" class="btn btn-primary mb-2" @onclick="GetProduct">Request</button>
    </div>
</div>

@if (product != null)
{
    <p>Building ID: @product.BuildingId</p>
    <p>External Building ID: @product.ExternalBuildingId</p>
    <p>Address ID: @product.AddressId</p>
    <p>External Address ID: @product.ExternalAddressId</p>
    <p>Neighborhood ID: @product.NeighborhoodId</p>
    <p>Construction Year: @product.ConstructionYear</p>
    <p>Construction Year Reliability: @product.ConstructionYearReliability</p>
    <p>Recovery Type: @product.RecoveryType</p>
    <p>Restoration Costs: @product.RestorationCosts</p>
    <p>Height: @product.Height</p>
    <p>Velocity: @product.Velocity</p>
    <p>Ground Water Level: @product.GroundWaterLevel</p>
    <p>Ground Level: @product.GroundLevel</p>
    <p>Soil: @product.Soil</p>
    <p>Surface Area: @product.SurfaceArea</p>
    <p>Damage Cause: @product.DamageCause</p>
    <p>Enforcement Term: @product.EnforcementTerm</p>
    <p>Overall Quality: @product.OverallQuality</p>
    <p>Inquiry Type: @product.InquiryType</p>
    <p>Foundation Type: @product.FoundationType</p>
    <p>Foundation Type Reliability: @product.FoundationTypeReliability</p>
    <p>Drystand: @product.Drystand</p>
    <p>Drystand Reliability: @product.DrystandReliability</p>
    <p>Drystand Risk: @product.DrystandRisk</p>
    <p>Dewatering Depth: @product.DewateringDepth</p>
    <p>Dewatering Depth Reliability: @product.DewateringDepthReliability</p>
    <p>Dewatering Depth Risk: @product.DewateringDepthRisk</p>
    <p>BioInfection Reliability: @product.BioInfectionReliability</p>
    <p>BioInfection Risk: @product.BioInfectionRisk</p>
    <p>Unclassified Risk: @product.UnclassifiedRisk</p>
}

@code {
    [Parameter]
    public string Id { get; set; }

    private FunderMaps.Core.Types.Products.AnalysisProduct3 product;

    protected override async Task OnInitializedAsync()
    {
        var httpContext = HttpContextAccessor.HttpContext;

        var (user, tenant) =
        FunderMaps.AspNetCore.Authentication.PrincipalProvider.GetUserAndTenant<FunderMaps.Core.Entities.User,
        FunderMaps.Core.Entities.Organization>(httpContext.User);
        AppContext.User = user;
        AppContext.Tenant = tenant;

        if (!string.IsNullOrEmpty(Id))
        {
            product = await AnalysisRepository.Get3Async(Id);
        }
    }

    private async Task GetProduct()
    {
        var httpContext = HttpContextAccessor.HttpContext;

        var (user, tenant) =
        FunderMaps.AspNetCore.Authentication.PrincipalProvider.GetUserAndTenant<FunderMaps.Core.Entities.User,
        FunderMaps.Core.Entities.Organization>(httpContext.User);
        AppContext.User = user;
        AppContext.Tenant = tenant;

        product = await AnalysisRepository.Get3Async(Id);
    }
}
